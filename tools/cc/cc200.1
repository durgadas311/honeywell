.TH CC200 1 5/15/74 "cc-H200" "Honeywell 200/2000 C Compiler"
.SH NAME
cc \- C compiler
.SH SYNOPSIS
.B cc
[
.I options
]
files...
.SH DESCRIPTION
.B Cc
is the UNIX C compiler.
It accepts three types of arguments:

Arguments whose names end with `.c' are taken to be
C source programs; they are compiled, and
each object program is left on the file
whose name is that of the source with `.o' substituted
for `.c'.
The `.o' file is normally deleted, however, if a single
C program is compiled and loaded all at one go.

.SH OPTIONS
See
.I "ld (1)"
for load-time flags.

.TP
\fB\-c\fR
Suppress the loading phase of the compilation, and force
an object file to be produced even if only one program is compiled.

.TP
\fB\-o\ \fIfile\fR
Send output to \fIfile\fR.
For normal compile, it will contain the linked program.
For \fB-c\fR run it will contain the object file.
For \fB-S\fR it will contain the assembly language output.

.TP
\fB\-O\fR
Invoke an object-code optimizer.

.TP
\fB\-S\fR
Compile the named C programs, and leave the
assembler-language output on corresponding files suffixed `.s'.

.TP
\fB\-E\fR
Run only the macro preprocessor, sending output to stdout.

.TP
\fB\-v\fR
Verbose. Show all sub-commands that are executed.

.TP
\fB\-P\fR
Pass to preprocessor. Suppress removal of temp files.
Set preprocessor output file suffix to `.i'.

.TP
\fB\-D\fI...\fR
Pass to preprocessor.

.TP
\fB\-U\fI...\fR
Pass to preprocessor.

.TP
\fB\-I\fI...\fR
Pass to preprocessor.

.TP
\fB\-C\fI...\fR
Pass to preprocessor.

.TP
\fB\-L\-\fR
Suppress standard linking paths and libs.

.TP
\fB\-L\fIpath\fR
Pass to linker.

.TP
\fB\-a\ \fIaddr\fR
Pass to linker.

.TP
\fB\-t\ \fIlen\fR
Pass to linker.

.TP
\fB\-w\fR
Pass to phase-1 compiler \fBc0\fR.

.TP
\fB\-p\fR
Arrange for the compiler to produce code
which counts the number of times each routine is called;
also, if loading takes place, replace the standard startup
routine by one which automatically calls the
.I monitor
subroutine (3)
at the start and arranges to write out a
.I mon.out
file at normal termination of execution of the object program.
An execution profile can then be generated by
use of
.I prof
(1).
.PP

Other arguments are taken
to be either loader flag arguments, or C-compatible
object programs, typically produced by an earlier
.I cc
run,
or perhaps libraries of C-compatible routines.
These programs, together with the results of any
compilations specified, are loaded (in the order
given) to produce an executable program with name
.B a.out.

.SH NOTES
Because the H200/2000 architecture is so different, many
standard C conventions don't apply. Strings (char arrays)
cannot be terminated by '\\0' since that character does not
exist. They must be terminated with a RM. Also, newline ('\\n')
does not exist. See \fBh200io.h\fR for interfaces. Note
that \fBstdio.h\fR does not exist.

Also, the H200 character set is not ASCII, and so any code that
depends on the binary relationship between ASCII codes will not work.
Anything that is intended to be a character must be represented
either as a double-quoted string or as a single-quoted character
constant. The assembler handles the translation from source code ASCII
to object code H200 characters.

H200 "bytes" are actually 6-bit characters. This means that `int' is
4 characters or 24-bits. Pointers are also 24-bits. Care must be taken
to avoid assumptions about `int' or `char' sizes.

Many other caveats exist, especially related to H200 addressing of
numeric fields. Using pointers unaware can result in problems.

Because the H200 series require punctuation in memory to terminate
most operations, uninitialized variables can be disasterous. Take
extreme caution to initialize all data.

The only H200 compare instruction is effectively unsigned, and so
compare of signed ints is not as efficient as compare of unsigned.

The H200 instruction set does not include a bitwise OR.
Niether does it include bitwise NOT or 2's-compliment NEG.
This means that OR must be implemented using De Morgan's laws:
.IP
(A | B) == ~(~A & ~B)
.br
or more precisely:
.br
-1 ^ ((-1 ^ A) & (-1 ^ B))
.PP
and is not very
efficient compared to AND and XOR.

The H200 standard instruction set does not include any shift instructions.
Shifts are implemented using special FPU operations, and as such are much less
efficient than on conventional processors.

Operations on \fBchar\fR datatypes requires extra manipulation,
and as such are less efficient. Single-character constants (e.g. 'x')
are treated as unsigned int, to maximize optimization.

The compiler, and associated runtime, use index registers X1 through X7. X5 is
the official "return code". These registers are all used in a temporary fashion,
however any custom assembly code that makes calls into the runtime must understand that
these index registers may be overwritten. X1 is the stack pointer, and X2 is the
frame pointer.

The runtime assumes a MOD1 MSR environment, and sets up argv as follows:
.TP
[0] = PGM+SEG
program name and segment (8 char)
.TP
[1] = REV
program revision number (3 char)
.TP
[2] = VIS
program visibility mask (6 char)
.PP

The stack pointer (X1) is setup at the end of the .bss section.
No space is reserved automatically by the runtime, however
program loaders may do that. The simulator loader adds 256 to the .bss size.
The \fIld200\fR option \fB\-t\fR may be used to request additional space.
\fIcc200\fR will pass along any \fB\-t\fR option to the linker.

.SH FILES
.TP
file.c
input file
.TP
file.o
object file
.TP
a.out
loaded output
.TP
/tmp/ctm?
temporary
.TP
/lib/c[01]
compiler
.TP
/lib/c2
optional optimizer
.TP
/lib/crt0.o
runtime startoff
.TP
/lib/libc.a
C library; see section III.
.TP
/lib/liba.a
Assembler library used by some routines in libc.a
.SH "SEE ALSO"
``Programming in C\(em a tutorial,''
C Reference Manual,
monitor (3), prof (1), cdb (1), ld (1).
.SH DIAGNOSTICS
The diagnostics produced by C itself are intended to be
self-explanatory.
Occasional messages may be produced by the assembler
or loader.
Of these, the most mystifying are from the assembler,
in particular ``m,'' which means
a multiply-defined external symbol (function
or data).
.SH BUGS
