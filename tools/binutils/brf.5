.TH BRF 5 9/9/73 "binutils-H200" "Honeywell 200/2000 Tools"
.SH NAME
BRF, BRT, BRD \- Honeywell 200/2000 Binary Run Formats
.SH DESCRIPTION
Because the H200/2000 peripherals operate on 6-bit data streams,
and H200/2000 programs require punctuation of data in memory (8-bits),
a special format was used to allow loading of programs (vs. data).
The Binary Run Format was defined for this purpose, and when used
to create a bootstrap-able tape that was called a Binary Run Tape
(or a Binary Run Deck for punchcards).

Regardless of the medium, I/O is defined as groups of records.
BRF defines "expected" record sizes for various media.
Punchcards use, of course, 80-character records.
Disk and magnetic tape define a 250 character record.

This specification also defines "raw" records, which are intended
for bootstrap purposes. A description of bootstrap format is given later.

.SH "RECORD HEADER"
Except for raw records, each record contains a header that
describes it's purpose as well as it's relationship to adjacent records.
The first character in \fIevery\fR record is called the "banner character"
and it defines how the rest of the record is to be interpreted.

Here are the defined banner characters (in octal):
.TP
22
Unformatted (raw) bootstrap record.
.TP
42
Unformatted boot image.
.TP
50
First record of multi-record segment.
.TP
41
Middle record(s) of multi-record segment.
.TP
44
Last record of multi-record segment.
.TP
54
Only record of single-record segment.
.PP

Essentially: bit 40 (octal) indicates a BRF record,
bit 02 indicates boot records (unformatted - no header),
bit 10 indicates first record (program header),
bit 04 indicates last record (stop loading).

BRF records contain one of two types of headers.
The first record of a segment contains a program header,
the rest contain a subset. The first 7 characters
of both records have the same meaning.

The header format is as follows:

.TP
1:
Banner character.
.TP
2-4:
Record length, incl. header (sequence number for Card Loader).
.TP
5-6:
Sequence number, used for random-access on tape images
(not used by Card Loader)
.TP
7:
Length of header (7 or 24).

.PP
Program headers contain the following additional data:
.TP
8-10:
Revision number.
.TP
11-16:
Program name.
.TP
17-18:
Segment name.
.TP
19-24:
Visibility key (not used by Card Loader).
.PP

Note that, typically, program and segment name are combined
to form an 8-character program name.

The data payload of each record is a series of BRF commands
that describe how the image should be stored in memory.

.SH "BRF COMMANDS"

Here is a description of the BRF commands (octal):

.TP
01-17 \fIchr\fR...
Load 1-15 characters at DIST, clear punctuation,
advance DIST by number of characters.
.TP
21-37 \fIchr\fR...
Load 1-15 characters at DIST, set WM on first character,
advance DIST by number of characters.
.TP
41-57 \fIchr\fR...
Load 1-15 characters at DIST, set IM on first character,
advance DIST by number of characters.
.TP
60 \fIadr\fR
Set DIST to address in the following 3 characters.
.TP
61 \fIent\fR
End load, entry/start address is the following 3 characters.
.TP
62 \fIbeg\fR\ \fIend\fR\ \fIfil\fR
Clear memory region as directed by following 7 characters:
1-3 are start address, 4-6 are end address,
7 is fill character. Punctuation is cleared.
.TP
63
Set WM at DIST-1.
.TP
64
Set IM at DIST-1.
.TP
65 \fIbeg\fR\ \fIend\fR
(new) Declare memory range (requirements) of program.
The following 6 characters declare the low and high memory
addresses.
This is related to the OS/2000 EasyCoder RANGE directive,
however no new BRF documentation exists to confirm
implementation.
Only one RANGE command may be present in a program,
and it must be the first command in the program file.
.TP
77
End of record, read next (more records follow).
.PP
Commands 60-62 and 65 have a new extension defined to support the 19-bit
address space.
New commands 70-72 and 75 have the same meaning as 60-62 and 65
except that the 19th bit is "1" instead of "0".
In other words, bit 10 (octal) contains the value for the 19th bit.
Note that all addresses in these commands must have the same value
for the 19th bit
(a single command must be wholly contained within an 18-bit region).
This also means that a single program (load image) must fit within 256K.

.SH "BOOTSTRAP RECORD"

The bootstrap record is a single record containing enough code to
start loading the rest of the boot image.
This code must be self-punctuating, which typically means it begins
with a series of SW instructions (format a), which don't require
punctuation to execute. This record is intended to be loaded by
the BOOTSTRAP function on the front panel (or console), and is
thus not limited to any particular record length (unclear how
bootstrap from punchcards works). Note that the banner character
code 22 (octal) is the opcode for SW, and this is the only case
where the banner character is actually part of the image.

.SH "BOOT IMAGE"

The boot image, typically loaded by the bootstrap record, is
a series of BRF records that begin with banner character
42 (octal).
These records contain a strict subset of BRF commands.
Only 01-17, 21-37, 61, and 77 are supported, and the start
address for command 61 is ignored
(bootstrap code uses a hard-coded load/start address).
Documentation also declares there to be 14 boot image records,
so it is not clear if this can be variable length or not.

The purpose of the boot image code is to search and load the necessary segments
for the OS or monitor. It is also possible for a stand-alone program
to be inserted in place of the OS or monitor.

This code must be able to fully interpret record headers,
choose which segments to load, as well as interpret BRF payloads.

.SH "BINARY RUN TAPE"

The first record on a BRT must be "1HDR\ ".
This record is manually skipped during bootstrap.
The last three records on the tape must be "1EOF\ ", "1ERI\ ", "1ERI\ ".
It is not clear if these records must be 250 characters in length.

.SH "BINARY RUN VOLUME"

For use on disk packs, the bootstrap code is placed in track 0,
and BOOTSTRAP loads all records of track 0. This code must still
be self-punctuating, or at least the first part of it must be.
There is some reference to using 8-bit mode on disk packs, which
would allow loading punctuation with code.

The solution used here is to treat the track as a contiguous image,
but the first part of that track is self-punctuating bootstrap code
that loads the BRF data which follows. The BRF data is not formatted into
records with headers, it is a simple stream of BRF commands.
The final location of loaded code must be above the track image.

.SH "BINARY RUN DECK"

The bootstrap procedure for a BRD implies that the first card
contains enough logic to automatically load the rest of the Card Loader-Monitor.
However, it's not clear how much of the monitor is in BRF. The first cards
are simply referred to as "self-loading Card Loader-Monitor deck".
It seems apparent that the first card must be "raw" and begin with
octal 22 (SW instruction), a.k.a. the letter "B". It is not clear if
subsequent boot image cards have any special formatting.

Because of the limitations of 80 characters per card, and each
card loaded requires executing a PDT/PCB sequence, the card bootstrap
is divided into several stages.
The first stage clears punctuation in a chunk of memory after the first card,
sets up punctuation for the PDT/PCB loop,
and the second stage starts loading subsequent cards.
The code up to and including the PDT/PCB must fit on the first card.
A pre-determined number of cards are loaded, so the code typically has
to do a final assembly after determining the total number of cards.
These cards also include the punctuation setup for the third stage.
The third stage contains the actual monitor code, and is loaded into
the final origin address for the monitor.
Punctuation has already been setup.

.TP
card 1
Raw, self-punctuating, bootstrap code, loaded by BOOTSTRAP.
Must contain enough code to begin loading subsequent cards.
.TP
2-L
Raw, self-punctuating, boot image code, loaded by card 1.
This contains the remainder of the boot code needed to
load and setup the monitor code.
.TP
L-M
Raw monitor code image, punctuation setup was part of cards 2-L.
.TP
M-N
Full BRF program segments, to be searched, loaded, and executed by
Card Loader-Monitor.
.TP
last
"1EOF\ " card to indicate the end of the deck.
.PP

.SH "SEE ALSO"
a.out.200 (5), out2brt (1)
