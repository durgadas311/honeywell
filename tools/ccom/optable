%{
/*
 * The H200 presents a special problem w.r.t. addr-of operations:
 *
 *	ptr = &var; // both explicit and implicit
 *
 * Solutions:
 *
 * 1)	12*N bytes:
 *		bct	var,040	// branch never
 *		scr	ptr,067
 *
 * 2)	4+9*N bytes:
 *	.var:	.word	var
 *		...
 *		lca	.var,ptr
 *
 * Solution #1 is the only one that works for AUTO vars
 * and function parameters. Although, AUTO/FUNC access is
 * usually converted to the 'bp' register plus offset:
 *
 *		lca	bp,x5
 *		ba	off,x5
 *
 * Spacewise, #1 is optimal for most cases, i.e. where "&var"
 * is never/rarely used (references < 2).
 *
 * Spacewise, #2 scales better for multiple references, i.e. > 1.
 *
 * Speedwise, #2 is always faster.
 *
 * Space considerations must include that #2 requires every variable
 * to have the extra pointer storage, even if it is never accessed
 * using addr-of. In a large program with lots of variables,
 * this could end up being significant.
 *
 * Note that arrays, especially "char *" (i.e. strings), will
 * often, if not exclusively (and implicitly), require "&var".
 *
 * External variables present an additional problem, in that
 * if ".var" may ever be expected it must always be present.
 *
 * It may be possible to implement #1 here. Implementing #2
 * requires cooperating code throughout ccom. A hybrid approach
 * will likely be required (#1 is required for auto/params),
 * adding complexity both places.
 */
%}
%{
/*
 * c code tables-- compile to register
 */

struct table regtab[] = {
	{LOAD,cr106},	/* load */
	{INCBEF,cr70},	/* prefix ++, handled as += */
	{DECBEF,cr70},	/* prefix --, handled as -= */
	{INCAFT,cr32},	/* postfix ++ */
	{DECAFT,cr32},	/* postfix -- */
	{NEG,cr37},	/* unary - */
	{COMPL,cr38},	/* ~ */
	{CALL1,cr100},	/* call */
	{CALL2,cr100},	/* call */
	{ASSIGN,cr80},	/* = */
	{PLUS,cr40},	/* + */
	{MINUS,cr40},	/* - */
	{TIMES,cr42},	/* *, char/int, both signed & unsigned */
	{DIVIDE,cr43},	/* /, signed char/int, calls idiv */
	{PTOI,cr14},	/* PTOI: scale pointer difference to int */
	{MOD,cr43},	/* %, signed char/int, calls irem */
	{RSHIFT,cr45},	/* >>, signed */
	{URSH,cr45},	/* >>, unsigned */
	{LSHIFT,cr45},	/* << */
	{AND,cr40},	/* & */
	{OR,cr40},	/* | */
	{EXOR,cr49},	/* ^ */
	{ASPLUS,cr70},	/* += */
	{ASMINUS,cr70},	/* -= */
	{ASTIMES,cr72},	/* *= */
	{ASDIV,cr73},	/* /=, signed char/int, calls idiv */
	{ASMOD,cr73},	/* %=, signed char/int, calls irem */
	{ASRSH,cr75},	/* >>=, signed */
	{ASURSH,cr75},	/* >>=, unsigned */
	{ASLSH,cr75},	/* <<= */
	{ASOR,cr78},	/* |= */
	{ASXOR,cr79},	/* ^= */
	{JUMP,cr102},	/* goto */
	{ITOF,cr51},	/* cvt int => float */
	{FTOI,cr52},	/* cvt float => int */
	{FTOL,cr56},	/* cvt long => float */
	{LTOF,cr57},	/* cvt float => long */
	{ITOL,cr58},	/* cvt int => long */
	{LTOI,cr59},	/* cvt long => int */
	{LTIMES,cr82},	/* *, signed long, calls lmul */
	{LDIV,cr82},	/* /, signed long, calls ldiv */
	{LMOD,cr82},	/* %, signed long, calls lrem */
	{LASTIMES,cr86},	/* *=, signed long, calls almul */
	{LASDIV,cr86},	/* /=, signed long, calls aldiv */
	{LASMOD,cr86},	/* %=, signed long, calls alrem */
	{FSELA,cr16},	/* = for bit fields */
	{ITOC,cr109},	/* cvt int -> char */
	{UDIV,cr117},	/* /  for unsigned char/int or divisor known positive */
	{UMOD,cr117},	/* %  for unsigned char/int or divisor known positive */
	{ASUDIV,cr119},	/* /= for unsigned char/int or divisor known positive */
	{ASUMOD,cr119},	/* %= for unsigned char/int or divisor known positive */
	{PTOI1,cr107},	/* special case (int *) - (int *) */
	{ULTIMES,cr121},	/* *, unsigned long, calls lmul */
	{ULDIV,cr121},	/* /, unsigned long, calls uldiv */
	{ULMOD,cr121},	/* %, unsigned long, calls ulrem */
	{ULASTIMES,cr124},	/* *=, unsigned long, calls almul */
	{ULASDIV,cr124},	/* /=, unsigned long, calls ualdiv */
	{ULASMOD,cr124},	/* %=, unsigned long, calls ualrem */
	{ULTOF,cr127},	/* cvt unsigned long to float, calls ultof */
	{MINSTAT,cr130},	/* special handling of 'x - &name' */
	{0}
};
%}

/* goto (are these entries still used?) */
cr102:
%a,n
	b	A1

%n*,n
	F*
	b	#1(R)

/* call */
cr100:
%a,n
	b	A1

%n*,n
	F*
	b	#1(R)

%n,n
	F
	b	0(R)

/* load */
cr106:

%z,n
%zf,n
%c,n
	lca	A1,R

%aub,n
%ab,n
	lca	N0,R
	exm	A1,R,001

%a,n
%ad,n
%af,n
	lca	A1,R

%nub*,n
%nb*,n
	F1*
	lca	A1,R+
	lca	N0,R
	exm	#1(R+),R,001

%n*,n
%nd*,n
	F*
	lca	#1(R),R

%nf*,n
	F*
	lca	#1(R),R

%cl,n
%cul,n
	li	R+,A1+
	li	R,A1

%al,n
%aul,n
	lca	A1,R

%nl*,n
%nul*,n
	F*
	lca	#1(R),R

%n,n
	F
	foo

/* ++,-- postfix; the right operand is always a CON */
cr32:
%aw,1
%aw,2
%aw,n
%ab,n
%aub,n
	I	A2,A1

%ew*,1
	F1*
	I	A2,#1(R)

%nw*,1
	F*
	lca	&(x1),#1(R)
	I'	#1(R)
	lca	R,&(x1)
	Q

%ew*,n
	F1*
	lca	#1(R1),R
	I	A2,#1(R1)

%eb*,n
%eub*,n
	F1*
	lca	#1(R1),R
	I	A2,#1(R1)

%nw*,n
	F*
	lca	#1(R),&(x1)
	I	A2,#1(R)
	Q

%nb*,n
%nub*,n
	F*
	lca	&(x1),(R)
	I	A2,(R)
	lca	R,&(x1)
	Q

%al,1
%aul,1
	F
	I'	A1+
	V	A1

%el*,1
%eul*,1
	F1*
	lca	#1(R1),R
	I'	#1(R1)

%nl*,1
%nul*,1
	F*
	lca	&(x1),#1(R)
	I'	#1(R)
	lca	R,&(x1)
	QQ

/* - unary */
cr37:
%n,n
	F
	ha	NN1,R
	ba	N1,R

/* unary ~ */
cr38:
%n,n
	F
	ha	NN1,R


/* = */
cr80:
%aub,n
%a,n
%ad,nf
	S
	lcaB1	R,A1

%af,nf
	S
	lca	R,A1

%nd*,af
	F*
	S
	lca	R,#1(R)

%nb*,c
%nub*,c
	F*
	lca	A2,#1(R)

%n*,c
	F*
	lca	A2,#1(R)

%nb*,ab
%nub*,ab
%nb*,aub
%nub*,aub
	F*
	lca	A2,#1(R)

%nb*,a
%nub*,a
	F*
	lca	A2,#(R)

%n*,aw
	F*
	lcaB1	A2,#1(R)

%nf*,af
	F*
	S
	lca	R,#1(R)

%nub*,e
%n*,e
	F*
	S1
	lca	#1(R),R

%ed*,nf
	S
	F1*
	lca	R,#1(R1)

%ef*,nf
	S
	F1*
	lca	R,#1(R1)

%nub*,n
%n*,n
%nd*,nf
	FS*
	S
	lca	0(x1),r0

%nf*,nf
	FS*
	S
	lca	0(x1),x3
	lca	R,0(x3)

%al,nl
%al,nul
%aul,nl
%aul,nul
	S
	lca	A1,R

%el*,nl
%el*,nul
%eul*,nl
%eul*,nul
	S
	F1*
	lca	#1(R1),R

%nl*,nl
%nl*,nul
%nul*,nl
%nul*,nul
	FS*
	S
	lca	0(x1),x3
	lca	0(x3),R

/* field assign, value in reg. */
cr16:
%a,n
	S
	li	r0,Z
	szcB1	r0,A1'
	socB1	R,A1''

%e*,n
%	[fas1]

%n*,n
	SS
	F*
	li	r0,Z
	szcB1	r0,#1(R)
	socB1	0(x1),#1(R)
	mov	0(x1)+,R

/* <<, >>, unsigned >> */
cr45:
%nub,c
%n,c
	F
	lca	A1,R
	I	A2,R

%nub,a
%n,a
	F
	I	A2,R

%nub,e
%n,e
	F
	S1
	mov	R1,r0
	jeq	.+4
	I	R,0

%nub,n
%n,n
	SS
	F
	mov	0(x1),r0
	jeq	.+4
	I	R,0

%nl,c
%nul,c
	F!
	I	A2,r0

%nul,a
%nl,a
	F!
	I	A2,r0

%nul,e
%nl,e
	F!
	S1
	I	A2,A1

%nul,n
%nl,n
	SS
	F!
	I	R1,r0

/* +, -, |, &~ */
cr40:
%n,z
	F
	barfoo

%ab,c
%aub,c
	lca	N0,R
	exm	(A1-3),R,001
	I	A2,R

%c,c
%a,c
	lca	A1,R
	I	A2,R

%nb*,c
%nub*,c
	F
	lca	N0,R
	exm	(A1-3),R,001
	I	A2,R

%n*,c
	F
	lca	(A1-3),R
	I	A2,R

%n,c
	F
	lca	A1,R
	I	A2,R

%[add1:]
%n,aw
%nf,ad
	F
	IB2	A2,R

%[add2:]
%n,ew*
%nf,ed*
	F
	S1*
	IB2	#2(R1),R

%[add3:]
%n,e
%nf,ef
	F
	S1
	IBF	R1,R

%[add5:]
%n,n
%nf,nf
	SS
	F
	IBF	R,0(x1)

%nl,c
%nul,c
	F
	I	A2,R

%nl,cl
%nul,cl
	F
	I	A2,R

%nl,a
%nul,a
	F
	I	A2,R

%nl,e
%nul,e
	F
	S1
	I	R1,R

%nl,al
%nl,aul
%nul,al
%nul,aul
	F
	I	A2,R

%[addl1:]
%nl,el
%nl,eul
%nul,el
%nul,eul
	F
	S1
	I	R1,R

%[addl2:]
%nl,nl
%nl,nul
%nul,nl
%nul,nul
	SS
	F
	I	R,0(x1)

/* ^ -- xor */
cr49:
%n,e
%	[add3]

%n,n
	FS
	S
	I	R,0(x1)

%nl,el
%nl,eul
%nul,el
%nul,eul
%	[addl1]

%nl,nl
%nl,nul
%nul,nl
%nul,nul
	SS
	F
	I	R,0(x1)

/* '*' -- low word of result is okay for both signed and unsigned.
 * R is increased by 1 following these snippets.
 */
cr42:
%ab,c
	I	A2,A1

%a,c
	lca	A1,R
	I	A2,R

%n,c
	F
	I	A2,R

%n,aw
%nf,ad
	F
	IB2	A2,R

%n,ew*
%nf,ed*
	F
	S1*
	IB2	R,#2(R1)

%n,e
%nf,ef
	F
	S1
	IBF	R,R1

%n,n
%nf,nf
	SS
	F
	IBF	R,0(x1)

/* / and % -- signed */
cr43:
%n,e
	F!
	S1!
	I	A2,A1

%n,n
	SS
	F!
	I	0(x1),A1

%nf,ad
%	[add1]

%nf,ed*
%	[add2]

%nf,ef
%	[add3]

%nf,nf
%	[add5]

/* PTOI */
cr14:
%nl,a
%nul,a
	F
	li	r0,A2,PTOI
	div	r0,R,PTOI

/* +=, -= */
cr70:
%aw,1
	I	A2,A1

%aw,2
	I	A2,A1

%aub,c
%a,c
	I	A2,A1

%[addq1:]
%aw,aw
	I	A2,A1

%[addq20:]
%aub,aw
%a,aw
	I	A2,A1

%[addq1a:]
%ad,ad
	IBF	A2,A1

%[addq2:]
%aw,nw*
	S*
	I	#2(R),A1

%[addq3:]
%aw,n
	S
	I	R,A1

%[addq21:]
%a,n
%aub,n
	SS
	I	A1,0(x1)

%[addq4:]
%ew*,nw*
	S*
	F1*
	I	#2(R),#1(R1)

%[addq4a:]
%ad,ef
	S1
	IBF	R1,A1

%[addq5:]
%ad,nf
	SS
	IBF	0(x1),A1

%[addq6:]
%af,nf
	SS
	IBF	0(x1),A1

%[addq7:]
%ew*,n
	S
	F1*
	I	R,#1(R1)

%[addq8:]
%nw*,n
	SS
	F*
	I	0(x1),#1(R)

%[addq9:]
%nub*,n
%n*,n
	SS
	F*
	lca	R,x3
	IBF	0(x1),#1(x3)

%[addq22:]
%nub*,n
%	[addq9]

%[addq9a:]
%nd*,nf
	SS
	F*
	IBF	0(x1),#1(R)

%[addq10:]
%nf*,nf
	SS
	F*
	IBF	#1(R),0(x1)

%al,1
%aul,1
	I	A2,A1
	F

%al,2
%aul,2
	I	A2,A1
	F

%[addq11:]
%al,c
%aul,c
	I	A2,A1
	F

%[addq12:]
%al,al
%al,aul
%aul,al
%aul,aul
	I	A2,A1
	F

%[addq13:]
%al,nl
%al,nul
%aul,nl
%aul,nul
	S
	I	R,A1
	F

%[addq14:]
%nl*,c
%nul*,c
	F*
	I	A2,#1(R)

%nl*,cl
%nul*,cl
	F*
	I	A2,#1(R)

%[addq15:]
%nl*,al
%nl*,aul
%nul*,al
%nul*,aul
	F*
	I	A2,#1(R)

%[addq16:]
%nl*,nl
%nl*,nul
%nul*,nl
%nul*,nul
	SS
	F*
	I	0(x1),#1(R)

/* '*=' */
cr72:
%ab,c
%aub,c
%ab,aw
%aub,aw
	lca	N0,R
	exm	A1,R,001
	I	A2,R
	exm	R,A1,001

%a,c
	I	A2,A1

%aub,ab
%aub,aub
%a,ab
%a,aub
	I	A2,A1

%a,aw
	I	A2,A1

%ab,nb
%aub,nb
	lca	N0,R
	exm	A1,R,001
	lca	N0,R+
	exm	(A2-3),R+,001
	I	R+,R
	exm	R,A1,001

%ab,n
%aub,n
	SS
	lca	N0,R
	exm	A1,R,001
	I	(A2-3),R
	exm	R,A1,001

%a,n
	SS
	I	A2,A1

%nb*,nb*
%nub*,nb*
	FS*
	S
	lca	N0,R
	exm	(A1-3),R,001
	lca	N0,R+
	exm	(A2-3),R+,001
	I	R+,R
	exm	R,(A1-3),001

%nb*,nb
%nub*,nb
%nb*,nub
%nub*,nub
	FS*
	S
	lca	N0,R
	exm	(A1-3),R,001
	lca	N0,R+
	exm	A2,R+,001
	I	R+,R
	exm	R,(A1-3),001

%nb*,n
%nub*,n
	FS*
	S
	lca	N0,R
	exm	(A1-3),R,001
	I	A2,R
	exm	R,(A1-3),001

%n*,nb
	FS*
	S
	lca	N0,R
	exm	A2,R,001
	I	R,(A1-3)

%n*,n
	FS*
	S
	I	A2,(A1-3)

%ad,ad
%	[addq1a]

%ad,ef
%	[addq4a]

%ad,nf
%	[addq5]

%af,nf
%	[addq6]

%nd*,nf
%	[addq9a]

%nf*,nf
%	[addq10]

/* /= and %= -- signed int */
cr73:
%a,e
%aub,e
	S1!
	I	0(x1),A1

%a,n
%aub,n
	SS
	I	0(x1),A1

%n*,n
%nub*,n
	FS*
	S!
	I	R1,#1(x3)

%ad,ad
%	[addq1a]

%ad,ef
%	[addq4a]

%ad,nf
%	[addq5]

%af,nf
%	[addq6]

%nd*,nf
%	[addq9a]

%nf*,nf
%	[addq10]

/* ^= -- =xor */
cr79:
%aw,n
	S
	I	R,A1

%aub,n
%ab,n
	SS
	I	0(x1),A1

%nub*,n
%nb*,n
	FS*
	S
	lca	0(x1),x3
	I	A2,#1(x3)

%n*,n
	FS*
	S
	lca	0(x1),x3
	I	A2,0(x3)

/* <<=, >>=, unsigned >>= */
cr75:
%r,c
	I	A2,A1

%r,n
	S
	I	A2,A1

%aub,c
%a,c
	I	A2,A1

%aub,n
%a,n
	S
	I	A2,A1

%aul,c
%al,c
	F!
	I	0(x1),A1

%aul,e
%al,e
	F!
	S1
	I	R1,A1

%aul,n
%al,n
	SS
	F!
	I	r0,A1

/* with a long shift ignore the high word */
%aul,nl
%al,nl
	SS
	F!
	I	r0,A1

/* =| */
cr78:
%aw,aw
	I	A2,A1

%aub,a
	IBF	A2,A1'

%a,aw
%ad,ad
	I	A2,A1

%aw,nw*
	I	A2,A1

%aw,n
	I	A2,A1

%aub,n
	SS
	IBF	0(x1),A1'

%ew*,nw*
	I	A2,A1

%ad,ef
	I	A2,A1

%a,n
%ad,nf
	I	A2,A1

%af,nf
	I	A2,A1

%ew*,n
	I	A2,A1

%nw*,n
	I	A2,A1

%n*,n
	I	A2,A1

%nub*,n
	FS*
	SS
	IBF	0(x1),*2(x1)

%nd*,nf
	I	A2,A1

%nf*,nf
	I	A2,A1

%al,c
%aul,c
	I	A2,A1

%al,al
%al,aul
%aul,al
%aul,aul
	I	A2,A1

%al,nl
%al,nul
%aul,nl
%aul,nul
	I	A2,A1

%nl*,c
%nul*,c
	I	A2,A1

%nl*,al
%nl*,aul
%nul*,al
%nul*,aul
	I	A2,A1

%nl*,nl
%nl*,nul
%nul*,nl
%nul*,nul
	I	A2,A1

/* int -> float */
cr51:
%aw,n
	movif	A1,R

%nw*,n
	F*
	movif	#1(R),R

%n,n
	F
	movif	R,R

/* float, double -> int */
cr52:
%nf,n
	F
	movfi	R,R

/* double (float) to long */
cr56:
%nf,n
	F
	movfi	0(x1),0(x1)

/* long to double */
cr57:
%al,n
	movif	A1,R

%nl*,n
	F*
	movif	#1(R),R

%nl,n
	FS
	movif	0(x1),R

/* unsigned long to float(double) */
cr127:
%aul,n
	lca	0(x1),A1
	b	I

%nul*,n
	F*
	lca	0(x1),#1(R)
	b	I

%nul,n
	FS
	b	I

/* integer to long */
cr58:
%eu,n
	F1!
	lca	A1,R

%nu,n
	F
	bs	R1
	mcw	R,R1

%e,n
	F1!
	bs	R1
	mcw	R,R1

%n,n
	F
	bs	R1
	mcw	R,R1

/* long to integer */
cr59:
%al,n
%aul,n
	mcw	R,A1

%nl*,n
%nul*,n
	F*
	mcw	R,A1

/* *, /, % for longs. */
cr82:
%[l82:]
%nl,nl
%nl,nul
%nul,nl
%nul,nul
	SS
	FS
	I	A2,A1

/* *, /, % for unsigned long */
cr121:
%nul,nl
%nl,nul
%nul,nul
%	[l82]

/* *=, /=, %= for unsigned long */
cr124:
%n,nl
%n,nul
%nl,n
%nul,n
%	[l86]

/* *=, /=, %= for longs */
/* Operands of the form &x op y, so stack space is known. */
cr86:
%[l86:]
%n,nl
%n,nul
	SS
	FS
	I	A2,A1

/* convert integer to character (sign extend) */
cr109:
%n,n
	F
	exm	what?

/* / and % where divisor is unsigned or known to be positive */
cr117:
%n,c
	F
	I	A2,R

%n,aw
	F
	I	A2,A1

%n,ew*
	F
	S1*
	I	#2(R1),R

%n,e
	F
	S1
	I	R1,R

%n,n
	SS
	F
	I	0(x1),R


/* /= and %= where divisor is unsigned or known to be positive */
cr119:
%aub,c
%a,c
	I	A2,A1

%aub,aw
%a,aw
	I	A2,A1

%aub,n
%a,n
	SS
	I	0(x1),A1

%eub*,n
%e*,n
	SS
	F1*
	I	0(x1),#1(R1)

%nub*,n
%n*,n
	FS*
	SS
	I	0(x1),#1(R1)

/* (int *) - (int *) */
cr107:
%n,n
	F?
	sra	R,1

/* x - &name */
cr130:
%n,n
	F
	lca	A2,R1
	lca	R,R1

%nl,n
	F
	lca	A2,R1
	lca	R,R1

%{
/*
 * c code tables -- compile for side effects.
 * Also set condition codes properly (except for ++, --)
 */

struct table efftab[] = {
	{INCBEF,ci70},	/* prefix ++ */
	{DECBEF,ci70},	/* prefix -- */
	{INCAFT,ci70},	/* postfix ++ */
	{DECAFT,ci70},	/* postfix -- */
	{ASSIGN,ci80},	/* = */
	{ASPLUS,ci70},	/* += */
	{ASMINUS,ci70},	/* -= */
	{ASOR,ci78},	/* |= */
	{ASXOR,ci79},	/* ^= */
	{FSELA,ci16},	/* field assign, FSELA */
	{STRSET,ci116},	/* structure assignment setup */
	{0}
};
%}

/* = */
ci80:
%r,z
	lca	A2,A1

%ab,z
%aub,z
	exm	A2,A1,001

%r,c
	lca	A2,A1

%r,a
%r,aub
	IB2	A2,A1

%r,n
	S
	I	R,A1

%ab,c
%aub,c
	exm	A2,A1,001

%ab,ab
%ab,aub
%aub,ab
%aub,aub
	exm	A2,A1,001

%ab,n
%aub,n
	S
	exm	(A2-3),A1,001

%aw,z
%ad,zf
	IB1	N0,A1

%nb*,z
%nub*,z
	F*
	exm	N0,#1(R),001

%[move2:]
%n*,z
%nd*,zf
	F*
	lca	A2,#1(R)

%nub*,z
	F*
	exm	A2,#1(R),001

%r,c
	lca	A2,A1

%a,c
	lca	A2,A1

%ab,c
%aub,c
	li	R,A2*256
	IBF	R,A1

%[move3:]
%aw,aw
	I	A2,A1

%[move4:]
%a,n*
%aub,n*
	S*
	lca	(A2-3),A1

%[move5:]
%ab,n
%aub,n
	S
	exm	A2,A1,001

%a,nb
%a,nub
	S
	lca	N0,A1
	exm	A2,A1,001

%a,e
	S
	I	R,A1

%a,n
	S
	I	A2,A1

%nb*,c
%nub*,c
	F*
	exm	A2,0(R),001

%n*,c
	F*
	IB1	A2,0(R)

%nb*,ab
%nub*,ab
%nb*,aub
%nub*,aub
	F*
	exm	A2,0(R),001

%nb*,a
%nub*,a
	F*
	exm	A2,0(R),001

%n*,a
	F*
	I	A2,#1(R)

%nb*,e*
%nub*,e*
%n*,ew*
	F*
	S1*
	IBF	(A2-3),0(R)

%nub*,e
%n*,e
	F*
	S1
	<1	R1,8
	IB1	R1,#1(R)

%[move9:]
%e*,nw*
%eb*,n*
%eub*,n*
	S*
	F1*
	IBF	#2(R),#1(R1)

%[move10:]
%e*,n
%eub*,n
	S
	F1*
	<1	R,8
	IB1	R,#1(R1)

%n*,nw*
%nb*,n*
%nub*,n*
	FS*
	S*
	mov	0(x1)+,r1
	IBF	#2(R),#1(r1)

%[move12:]
%n*,n
%nub*,n
	FS*
	S
	mov	0(x1)+,r1
	IB1	R,#1(r1)

%aw,nf
	S
	movfi	R,A1

%ew*,nf
	S
	F1*
	movfi	R,#1(R1)

%al,z
%aul,z
	lca	A2,A1

%nl*,z
%nul*,z
	F*
	lca	A2,#1(R)


%al,cw
%aul,cw
	li	r0,A2
	I	r0,A1+
	sra	r0,15
	I	r0,A1

%[move13a:]
%al,aw
%aul,aw
	I	A2,A1+
	V	A1

%al,nw*
%aul,nw*
	S*
	mov	#2(R),A1+
	V	A1

%al,n
%aul,n
	S
	mov	R,A1+
	V	A1

%al,nf
%aul,nf
	S
	setl
	movfi	R,A1
	seti

%el*,nf
%eul*,nf
	S
	F1*
	setl
	movfi	R,#1(R1)
	seti

%al,cl
%aul,cl
	li	r0,A2
	I	r0,A1
	li	r0,A2+
	I	r0,A1+

%[move13:]
%al,al
%al,aul
%aul,al
%aul,aul
	I	A2,A1
	I	A2+,A1+
	V	A1

%[move14:]
%al,nl*
%al,nul*
%aul,nl*
%aul,nul*
	S*
	I	#2(R),A1

%[move15:]
%al,nl
%al,nul
%aul,nl
%aul,nul
	S
	I	R,A1

%[move14a:]
%nl*,aw
%nul*,aw
	F*
	I	A2,#1(R)

%[move16a:]
%nl*,al
%nl*,aul
%nul*,al
%nul*,aul
	F*
	I	A2,#1(R)

%[move16:]
%el*,nl
%el*,nul
%eul*,nl
%eul*,nul
	S
	F1*
	I	R,#1(R1)

%nl*,n
%nul*,n
	SS
	F*
	mov	0(x1),#1(R)

%[move17:]
%nl*,nl
%nl*,nul
%nul*,nl
%nul*,nul
	SS
	F*
	I	0(x1),#1(R)

/* |= */
ci78:
%r,c
	I	A1,A2,fubu

%a,1
%ab,1
%aub,1
	F
	sst	N1,A1,001

%a,2
%ab,2
%aub,2
	F
	sst	N2,A1,002

%ab,c
%aub,c
	F
	exm	A2,.+19,001
	sst	A2,A1,000

%a,c
	F
	lca	A2,R
	ha	NN1,R
	ha	NN1,A1
	ext	R,A1
	ha	NN1,A1

%aw,ab
	exm	A2,.+19,001
	sst	A2,A1,000

%aw,aw
	lca	A2,R
	ha	NN1,R
	ha	NN1,A1
	ext	R,A1
	ha	NN1,A1

%ab,n
%aub,n
	exm	A2,.+19,001
	sst	A2,A1,000

%a,n
	S
	I	R,A1

%nb*,c
%nub*,c
	F*
	I	A2,#1(R)

%n*,c
	F*
	I	A2,#1(R)

%n*,aw
%nb*,a
%nub*,a
	I	A2,A1

%n*,ew*
%nb*,e*
%nub*,e*
	I	A2,A1

%n*,e
	I	A2,A1

%e*,nw*
%eb*,n*
%eub*,n*
	I	A2,A1

%e*,n
	I	A2,A1

%n*,nw*
%nb*,n*
%nub*,n*
	I	A2,A1

%n*,n
	I	A2,A1

/* ^= */
ci79:
%al,nl
%al,nul
%aul,nl
%aul,nul
	S
	I	A1,R
	I	A1+,R+
	mov	R,A1
	mov	R+,A1+

%el*,nl
%el*,nul
%eul*,nl
%eul*,nul
	S
	F1*
	I	R,#1(R1)

%nl*,nl
%nl*,nul
%nul*,nl
%nul*,nul
	FS*
	S
	I	0(x1),#1(R1),R

/* +=, -=, ++, -- */
ci70:
%aw,1
	I'	A2,A1

%aw,2
	I'	A2,A1

%r,c
	I"	A2,A1

%ab,c
%aub,c
	li	r0,A2*256
	Ib	r0,A1

%a,c
	I	A2,A1

%aw,aw
%	[move3]

%a,n*
%aub,n*
%	[move4]

%a,n
%aub,n
%	[move5]

%nw*,1
	F*
	I'	#1(R),#1(R)

%ew*,nw*
%	[move9]

%a,ew*
%aub,ew*
	S*
	I	#2(R),A1

%a,n
%aub,n
	S
	movB1	A1',R1
	>1	R1,8
	I	R,R1
	<1	R1,8
	movB1	R1,A1

%ew*,n
%	[move10]

%nw*,n
%	[move12]

%n*,n
	SS
	F*
	I	0(x1),#1(R)

%al,c
%aul,c
	li	r0,A2
	I	r0,A1+
	V	A1
	sra	r0,15
	I	r0,A1

%al,cl
%aul,cl
	li	r0,A2
	I	r0,A1
	li	r0,A2+
	I	r0,A1+
	V	A1

%al,au
%aul,au
%	[move13a]

%al,al
%al,aul
%aul,al
%aul,aul
%	[move13]

%al,nl*
%al,nul*
%aul,nl*
%aul,nul*
%	[move14]

%al,nl
%al,nul
%aul,nl
%aul,nul
%	[move15]

%nl*,c
%nl*,au
%nul*,c
%nul*,au
%	[move14a]

%nl*,al
%nl*,aul
%nul*,al
%nul*,aul
%	[move16a]

%el*,nl
%el*,nul
%eul*,nl
%eul*,nul
%	[move16]

%nl*,nl
%nl*,nul
%nul*,nl
%nul*,nul
%	[move17]

/* field = ... */
ci16:
%ab,c
	li	r0,Z*256
	szcb	r0,A1'
	li	r0,A2*256
	socb	r0,A1

%a,c
	li	r0,Z
	szc	r0,A1'
	li	r0,A2
	soc	r0,A1

%a,a
	li	r0,Z
	szcB1	r0,A1'
	li	r0,A2
	socB1	r0,A1

%a,n
	S
	li	r0,Z
	szcB1	r0,A1'
	<1	R,8
	socB1	R,A1

%n*,a
	F*
	li	r0,Z
	szcB1	r0,#1(R)
	li	r0,A2
	socB1	r0,#1(R)

%[fas1:]
%e*,n
	S
	F1*
	li	r0,Z
	szcB1	r0,#1(R1)
	socB1	R,#1(R1)

%n*,e
	F*
	S1
	li	r0,Z
	szcB1	r0,#1(R)
	socB1	R1,#1(R)

%n*,n
	SS
	F*
	li	r0,Z
	szcB1	r0,#1(R)
	socB1	0(x1),#1(R)

%{
/*
 * c code tables-- set condition codes
 */

struct table cctab[] = {
	{LOAD,cc61},	/* load */
	{EXCLA,rest},	/* ! */
	{AMPER,rest},	/* & */
	{STAR,rest},	/* * */
	{NEG,rest},	/* unary - */
	{PLUS,rest},	/* + */
	{MINUS,rest},	/* - */
	{DIVIDE,rest},	/* / */
	{OR,rest},	/* | */
	{EQUAL,cc61},	/* == */
	{NEQUAL,cc61},	/* != */
	{LESSEQ,cc60},	/* <=, signed */
	{LESS,cc60},	/* <, signed */
	{GREATEQ,cc60},	/* >=, signed */
	{GREAT,cc60},	/* >, signed */
	{LESSEQP,cc61},	/* <=, unsigned */
	{LESSP,cc61},	/* <, unsigned */
	{GREATQP,cc61},	/* >=, unsigned */
	{GREATP,cc61},	/* > , unsigned */
	{ASTIMES,rest},	/* *= */
	{ASDIV,rest},	/* /= */
	{ASXOR,rest},	/* ^= */
	{0}
};
%}

/* unsigned relationals */
cc61:
%nb*,z
%nub*,z
	lca	N0,R
	exm	(A1-3),R,001
	c	N0,R

%nb,z
%nub,z
	lca	N0,R
	exm	A1,R,001
	c	N0,R

%n,z
	c	N0,A1

%nb*,1
%nub*,1
	lca	N0,R
	exm	(A1-3),R,001
	c	N1,R

%nb,1
%nub,1
	lca	N0,R
	exm	A1,R,001
	c	N1,R

%n,1
	c	N1,A1

%nb*,2
%nub*,2
	lca	N0,R
	exm	(A1-3),R,001
	c	N2,R

%nb,2
%nub,2
	lca	N0,R
	exm	A1,R,001
	c	N2,R

%n,2
	c	N2,A1

%nb,n
%nub,n
	lca	N0,R
	exm	A1,R,001
	c	A2,R

%nb*,n
%nub*,n
	lca	N0,R
	exm	(A1-3),R,001
	c	A2,R

%n,n
	c	A2,A1

/* signed relationals */
cc60:
%c,z
%a,z
%ad,zf
%aub,z
%af,z
	I	A2,A1

%n*,z
%nd*,zf
	F*
	I	A2,#1(R)

%nb*,z
%nub*,z
	F*
	I	A2,#1(R)

%nf*,z
	F*
	I	A2,#1(R)

%n,z
%nf,zf
	FC
	foo

%r,c
	I	A2,A1

%nb*,c
%nub*,c
	F
	lca	N0,R
	exm	(A1-3),R,001
	I	A2,R

%n*,c
	F
	I	A2,(A1-3)

%n,c
	F
	I	A2,A1

%aw,aw
%ab,ab
%aub,aub
	IBF	A2,A1

%nw*,aw
%nb*,ab
%nub*,aub
	F*
	IBF	#1(R),A2

%n,aw
%nf,ad
	F
	IB2	R,A2

%nw*,ew*
%nb*,eb*
%nub*,eub*
	F*
	S1*
	IBF	#1(R),#2(R1)

%nw*,e
	F*
	S1
	IB1	#1(R),R1

%n,ew*
%nf,ed*
	F
	S1*
	IB2	R,#2(R1)

%n,e
%nf,ef
	F
	S1
	IBF	R,R1

%n,n
%nf,nf
	SS
	F
	IBF	R,&(x1)
	Q

%al,z
%aul,z
	mov	A1,r0
	X0

%al,c
%aul,c
	X0
	c	A1,A2

%al,cl
%aul,cl
	c	A1,A2
	X0


%cl,al
%cl,aul
	I	A2,A1
	X0

%al,au
%aul,au
	mov	A1,r0
	X0

%[lcmp1:]
%al,al
%al,aul
%aul,al
%aul,aul
	I	A1,A2
	X0

%nl*,z
%nul*,z
	F*
	mov	#1(R),r0
	X0

%nl*,c
%nul*,c
	F*
	mov	#1(R),r0
	X0
	ci	r0,A2

%nl*,au
%nul*,au
	F*
	X0
	I	A2,#1(R)

%[lcmp2:]
%nl*,al
%nl*,aul
%nul*,al
%nl*,aul
	F*
	I	A2,#1(R)
	X0

%nl,z
%nul,z
	F
	mov	R,r0
	X0
	mov	R+,r0
	X1

%nl,c
%nul,c
	F
	mov	R,r0
	X0
	ci	R+,A2
	X1

%nl,cl
%nul,cl
	F
	ci	R,A2
	X0
	ci	R+,A2+
	X1

%nl,au
%nul,au
	F
	mov	R,r0
	X0
	I	R+,A2
	X1

%[lcmp3:]
%nl,al
%nl,aul
%nul,al
%nul,aul
	F
	I	R,A2
	X0
	I	R+,A2+
	X1

%[lcmp4:]
%nl*,el*
%nl*,eul*
%nul*,el*
%nul*,eul*
	F*
	S1*
	I	#2(R1),#1(R)
	X0

%[lcmp5:]
%nl,el*
%nl,eul*
%nul,el*
%nul,eul*
	F
	S1*
	I	R,#2(R1)
	X0

%[lcmp6:]
%nl,nl
%nl,nul
%nul,nl
%nul,nul
	FS
	S
	lca	0(x1),R
	lca	R,4(x1)
	mov	0(x1),2(x1)
	Q
	I	0(x1)+,0(x1)+
	X0
	I	R,R+
	X1

/* set codes right by moving the result */
rest:
%n,n
%nf,nf
	H
	barf

%{
/*
 * c code tables-- expression to -0(x1)
 */

struct table sptab[] = {
	{LOAD,cs106},		/* load */
	{PLUS,cs40},		/* + */
	{MINUS,cs40},		/* - */
	{AND,cs40},		/* & */
	{OR,cs43},		/* | */
	{NEG,cs41},		/* unary - */
	{COMPL,cs42},		/* unary ~ */
	{0}
};
%}

/* load to stack */
cs106:
%ab,n
%aub,n
	exm	A1,&(x1),001
	Q

%aw,n
	lca	A1,&(x1)
	Q

%nw*,n
	F*
	lca	#1(R),&(x1)
	Q

/* unary - */
cs41:
%n,n
	lca	N0,&(x1)
	bs	A1,&(x1)
	Q

/* unary ~ */
cs42:
%n,n
	lca	A1,&(x1)
	ha	NN1,&(x1)
	Q

/* | */
cs43:
%n,n
	lca	A1,&(x1)
	lca	A2,R
	ha	NN1,&(x1)
	ha	NN1,R
	ext	R,&(x1)
	ha	NN1,&(x1)
	Q

/* +, -, & */
cs40:
%ab,c
%aub,c
	lca	N0,&(x1)
	exm	A1,&(x1),001
	I	A2,&(x1)
	Q

%a,c
	lca	A1,&(x1)
	I	A2,&(x1)
	Q

%nb,c
%nub,c
	FS
	lca	N0,&(x1)
	exm	A1,&(x1),001
	I	A2,&(x1)
	Q

%n,c
%n,n
	FS
	lca	A1,&(x1)
	I	A2,&(x1)
	Q

%a,aw
	FS
	I	A2,&(x1)
	Q

%a,nw*
	FS
	S*
	I	#2(R),&(x1)
	Q

%a,n
	FS
	S
	I	R,&(x1)
	Q

/* setup for structure assign */
ci116:
%n,e
	F!
	S1!

%n,n
	SS
	F!
	lca	r1,&(x1)
	Q

/* end of table */
