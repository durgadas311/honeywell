
00010         PROG  MACHIN
00020         ORG   0
00030         ADMODE2
00040*
00050* CALCULATE PI USING MACHIN'S FORMULA
00060*
00070* USES HALF CHARACTER PACKING IN THE STORAGE AREA
00080* AND A CODE SCRIPT SUPERIMPOSED ON THE MAIN PROGRAM CODE
00090*
00100  TOP    EQU   2047               TOP OF MEMORY
00110*
00120* ------SUB-LOOP B------          CALCULATES ONE DIGIT OF EACH TERM
00130*                                 OF BOTH ARCCOT COMPONENTS AND
00140*                                 DOES 2N-1 DIVISION TO ADJUST PI
00150*
00160  LOOPB  BA    TWO,DIV2N          INCREASE 2N-1 DIVISOR FOR NEXT TERM
00170  POWSW  B     GETPOW
00180         LCA   PWQUOT,DIVID
00190         BS    PWQUOT
00200         B     GET2N
00210  GETPOW B     GET                GET NEXT VALUE FROM STORE
00220  CALCPW LCA   REMX10,DIVID
00230         BA    PWQUOT,DIVID       ADD IN THE PREVIOUS QUOTIENT
00240         LCA   PDIVIS
00250         B     DIV                DO THE POWER DIVISION
00260         SST   QUOT,PWQUOT,17     STRIP OFF DECIMAL SIGN DURING MOVE
00270*
00280* ------END OF POWER PROCESS AND START OF 2N-1 PROCESS
00290*
00300  GET2N  B     GET                GET NEXT VALUE
00310         C     FIVE,REMX10-3      CHECK FOR A MARKER
00320         BCT   GOPUT-1,41         SKIP MARKER ROUTINE IF NONE
00330  GOTMRK BS    FIVE,REMX10-3      REMOVE THE MARKER
00340         SW    GOSCPT             TURN ON THE SCRIPT ENTRY POINT
00350  NOP    NOP
00360  GOPUT  B     PUT                STORE THE POWER REMAINDER
00370         NOP
00380  GOSCPT B     SCRIPT             ENTER THE SCRIPT READER
00390*
00400* ------CALCULATE 2N-1 QUOTIENT AND ADJUST PI BY THAT AMOUNT-----
00410*
00420  CALC2N LCA   REMX10,DIVID       SET UP OLD REMAINDER TIMES 10
00430  SUBPOW BA    PWQUOT,DIVID       ADJUSTED BY POWER QUOTIENT
00440*                                 MAY BE ADDED OR SUBTRACTED
00450         LCA   DIV2N              SET DIVISOR
00460         B     DIV                DO THE 2N-1 DIVISION
00470* -------ADJUST PI-------
00480  ADDSUB A     QUOT,PI            ON ALTERNATE TERMS THIS LINE
00490         HA    ONE,ADDSUB         FLIPS BETWEEN ADD AND SUBTRACT
00500* -----------------------
00510         B     PUT                STORE 2N-1 REMAINDER
00520         B     LOOPB              RETURN TO PROCESS NEXT TERM
00530*
00540* ------SECOND PART OF POWER PROCESSING END ROUTINE------
00550*
00560  PWEND2 CW    GOPUT              STOP STORING POWER REMAINDERS
00570         SW    PUTMRK             ADD A MARKER TO THE NEXT REMAINDER
00580         BCC   CALC2N,GETNUL,10   LAST TIME THROUGH SO LEAVE SCRIPT ON
00590         MCW   SCRSET,SCRGET+4    NOT LAST TIME SO RESTART THE SCRIPT...
00600         CW    GOSCPT             ...AND TURN IT OFF FOR NOW
00610         B     CALC2N             RESUME PROCESSING
00620*
00630* ------FIRST PART OF POWER PROCESSING END ROUTINE------
00640*
00650  PWEND1 CW    POWSW              TURN OFF POWER DATA RETRIEVAL
00660  PWENDN SW    GETNUL             TURNS OFF GET ROUTINE...
00670*                                 ...BUT ONLY ON ALTERNATE PASSES
00680         C     ZERO,PWQUOT        CHECK FOR A POWER QUOTIENT...
00690         BCT   CALC2N,45          ...AND GO ROUND AGAIN IF THERE IS
00700*        DROP BACK INTO THE SCRIPT READER - NO BRANCH REQUIRED
00710*
00720* ------SCRIPT READER - EXECUTES INSTRUCTIONS OVERLAID ONTO CODE
00730*                     ...AS PATTERNS OF ITEM MARKS
00740*
00750         NOP                      SPACE FOR COMPLETION MARKER
00760         DC    #5                 INSTRUCTION IS COMPILED HERE
00770  SCRIPT BS    *-1                CLEAR THE INSTRUCTION
00780         SST   NOP,SCRIPT-1,77    INSERT INSTRUCTION COMPLETION MARKER
00790         BCC   SCRIPT-5,SCRIPT-6,02  EXECUTE INSTRUCTION WHEN COMPLETE
00800         BA    SCRIPT-1           SHIFT UP ONE BIT
00810  SCRGET BCC   *+11,0,20          TEST CODE CHARACTER FOR ITEM MARK
00820         HA    ONE,SCRIPT-1       IF NOT SET BOTTOM BIT
00830         BA    ONE,*-7            MOVE TO NEXT CODE CHARACTER
00840         B     SCRIPT+9           LOOP BACK FOR NEXT BIT
00850*
00860* ------MAIN LOOP A------         CALCULATES ONE DIGIT OF PI
00870*
00880  STARTA PDT   PIPRIN,11,02,00    PRINT CHARACTER
00890         PCB   *,11,02,10         WAIT UNTIL PRINTING FINISHED
00900*
00910* ------RESTART LOOPB-----
00920*
00930         LCA   ONE,DIV2N          SET 2N-1 DIVISOR TO 1
00940         CW    GETNUL
00950         B     GET2N
00960*
00970* ------DIVIDE DIVID BY DIVIS GIVING QUOT------
00980* ------REMAINDER IS ALWAYS POSITIVE EVEN WHEN QUOT IS NEGATIVE----
00990*
01000  DIV    SCR   DIVX+2,70
01010         LCA   ZERO+1,QUOT
01020  DIV1   BCC   DIV2,DIVID-3,02
01030         BS    DIVIS,DIVID
01040  ADDOP  A     ONE,QUOT
01050         B     DIV1
01060  DIV2   BA    DIVIS,DIVID
01070         S     ONE,QUOT
01080         BCC   DIV2,DIVID-3,02
01090  DIVX   B     0
01100*
01110* ------GET A VALUE FROM STORE USING THREE BIT UNPACKING------
01120* ------RETURNS THE VALUE IN GETVAL AND TEN TIMES IT IN REMX10------
01130*
01140  GET    SCR   GETX+2,70          STORE THE RETURN ADDRESS
01150         BS    REMX10             CLEAR THE RESULT
01160         NOP                      NEXT INSTRUCTION IS SWITCHABLE
01170  GETNUL B     GETX               RETURN A ZERO DUMMY VALUE
01180         MCW   GETCHR,GETVAL+1    RESTORE PREVIOUS CHARACTER
01190  GETGET LCA   TOP                GET NEXT VALUE
01200         SCR   GETGET+2,67        STORE NEXT VALUE ADDRESS
01210         C     GETGET+2,LOWADD    TEST FOR BOTTOM OF STORE
01220         BCT   GETOK,41
01230         MCW   GETHI,GETGET+2     IF SO CONTINUE AT THE TOP AND...
01240         SW    PUTOK              TELL PUT STORE IS EMPTY TO THE BOTTOM
01250  GETOK  BS    GETCT              CLEAR SHIFT COUNTER
01260         A     ONE,GETCT          INCREMENT SHIFT COUNTER
01270         BCC   GETSET,GETVAL,10   EXIT RIGHT SHIFT WHEN AT LEFT OF VALUE
01280         LCA   GETVAL+2,GETVAL+3  SHIFT RIGHT ONE CHARACTER
01290         B     GETOK+3            RETURN TO CHECK FOR ANOTHER SHIFT
01300  GETSET MCW   GETVAL,GETCHR      SAVE TOP CHARACTER FOR NEXT TIME
01310         BCC   *+7,GETVAL,20      CHECK FOR OVERLAPPED FIELDS...
01320         NOP
01330  GETOVR SST   ZERO,GETVAL,70     ...AND REMOVE OVERLAPPED BITS
01340         CW    GETVAL             REMOVE CURRENT WORDMARK...
01350         LCA   ZERO               AND ATTACH ANOTHER CHARACTER
01360  GETSHF BCC   GETEXP,GETVAL+1,20 CHECK FOR A PACKED CHARACTER
01370         S     ONE,GETCT          DECREMENT SHIFT COUNTER
01380         BCT   GETADD,60          END SHIFTING IF BACK AT START
01390         LCA   GETVAL+3,GETWRK    MOVE OUT TO WORK AREA...
01400         LCA   GETWRK,GETVAL+2    ...AND RETURN SHIFTED LEFT
01410         B     GETSHF             RETURN TO CHECK AGAIN
01420  GETEXP SST   GETVAL+1,GETLOW,07 STORE BOTTOM THREE BITS
01430         BA    GETVAL+1           SHIFT LEFT...
01440         BA    GETVAL+1
01450         BA    GETVAL+1           ...THREE BITS
01460         MCW   GETLOW,GETVAL+1    RESTORE BOTTOM THREE BITS
01470         B     GETSHF+6           RETURN TO SHIFT LOOP
01480  GETADD BA    GETVAL,REMX10      ADD THE VALUE INTO THE RESULT
01490   GETMODBA    REMX10             MULTIPLY REMAINDER BY TEN
01500         BA    REMX10
01510         BA    GETVAL,REMX10
01520         BA    REMX10
01530  GETX   B     0                  EXIT FROM THE GET SUBROUTINE
01540*
01550* ------PUT A VALUE INTO STORE USING THREE BIT PACKING------
01560*
01570  PUT    SCR   PUTX+2,70          STORE THE RETURN ADDRESS
01580         NOP
01590  PUTMRK BA    NOP,DIVID-2        ADD A MARKER TO THE VALUE...
01600         CW    PUTMRK             ...AND PREVENT ANY MORE
01610         BCC   PUTPK,DIVID+1,20   DO PACKING IF A CHARACTER IS WAITING
01620* ------------------------------
01630  PUTMEM C     PUTPUT+4,LOWADD    TEST FOR BOTTOM OF STORE.
01640         BCT   PUTOK-1,41         IF SO NOTE THAT...
01650         CW    PUTOK              STORE ISN'T EMPTY TO THE BOTTOM...
01660         MCW   PUTHI,PUTPUT+4     AND CONTINUE AT THE TOP OF MEMORY.
01670* -----TEST WHETHER THE STORE IS FULL---
01680         NOP                      THIS SKIPS THE NEXT INSTRUCTION...
01690  PUTOK  B     PUTMOV             IF WE NEED TO TEST FOR SPACE.
01700         MCW   PUTPUT+4,PUTCHK    CHECK FOR AVAILABLE EMPTY MEMORY...
01710         BS    FOUR,PUTCHK        BETWEEN GET AND PUT POINTERS.
01720         C     GETGET+2,PUTCHK    IF MEMORY IS FULL...
01730         BCT   ENDNOW,41          TERMINATE THE PROGRAM.
01740* ---------------------------
01750  PUTMOV LCA   DIVID,DIVID+1      MOVE THE VALUE OVER ONE.
01760         C     ZERO,DIVID         CHECK FOR LEADING ZEROES...
01770         BCT   *+7,45
01780         SW    DIVID+1            AND IF SO TRUNCATE THE VALUE.
01790         C     DIVID+1,SEVEN      CHECK FOR EMPTY HALF CHARACTER...
01800         BCT   PUTPUT,41
01810         SI    DIVID+1            AND IF SO MARK FOR PACKING...
01820         BCC   PUTX,DIVID+1,10    BUT IF THE END OF THE VALUE EXIT
01830  PUTPK  BA    DIVID              START PACKING...
01840         BA    DIVID              BY MOVING UP THREE BITS...
01850         BA    DIVID
01860         SST   DIVID,DIVID+1,70   ADDING THE THREE NEW BITS IN...
01870         MCW                      AND MOVING THE REST BACK...
01880         MCW   ZERO               WITH A LEADING ZERO.
01890  PUTPUT LCA   DIVID+1,TOP        STORE THE CHARACTER PLUS A FEW...
01900         BS    ONE,*-1            BUT ONLY RECORD ONE AS STORED.
01910         BCC   PUTMEM,DIVID+1,30  IF LAST CHARACTER OF PREVIOUS VALUE...
01920*                  ...CHECK FOR EMPTY SPACE BEFORE STORING THE NEW VALUE
01930  PUTX   BCC   0,DIVID+1,10       IF THIS IS THE LAST CHARACTER EXIT
01940         B     PUTMOV             OTHERWISE RETURN TO PROCESS THE NEXT.
01950*
01960* ------END THE PROGRAM------
01970*
01980  ENDNOW EQU   *
01990         H     ENDNOW             HALT LOCKS INTO END ROUTINE
02000  ENDSCP EQU   *                  END OF THE SAFE AREA FOR SCRIPTS
02010*                 FROM THIS POINT ON ITEM MARKS MAY APPEAR ON DATA
02020*
02030* ------CONSTANTS------
02040*
02050   ZERO  DCW   #2B0               DON'T MAKE THIS ANY LONGER
02060  ONE    DC    #1B1               KEEP THIS AFTER ZERO FOR A LONG ONE
02070  PLSONE DCW   #1AA
02080  TWO    DCW   #1B2
02090  FOUR   DCW   #1B4               FOR PUT STORE EMPTY SPACE CHECK
02100  FIVE   DCW   #1B5
02110  SEVEN  DCW   #1B7
02120  EIGHT  DCW   #1B8
02130  DIVMOD DCW   #3B57144           EXCLUSIVE OR OF 25 AND 57121
02140 LLOWADD DSA   BOTTOM+3           LOWEST RIGHT-HAND END OF STORED VALUE
02150*
02160* - THE FOLLOWING ADDRESSES FOR CODE MODIFICATION PRESERVE ITEM MARKS
02170*
02180  GETHI  DSA   0
02190  PUTHI  DSA   0
02200  SCRSET DSA   0
02210*
02220* ------REUSABLE AREA-----
02230* CONTAINS DIFFERENT FIELDS AT DIFFERENT TIMES
02240* ROUTINES MUST SET THEIR OWN PUNCTUATION HERE
02250* IF ANOTHER ROUTINE AFFECTS IT
02260  REUSE  EQU   *
02270*
02280* LOOPB FIELDS
02290         ORG   REUSE
02300  PUTCHK DCW   #2                 WORK FIELD FOR PUT FREE SPACE CHECK
02310  DIV2N  DCW   #3                 DIVISOR FOR 2N-1 DIVISION
02320  QUOT   DCW   #2                 QUOTIENT FROM DIV ROUTINE
02330  GETVAL DC    #2                 GET ROUTINE WORK AREA - OVERLAPS QUOT
02340         DC    #3                 GET ROUTINE SHIFTING SPACE
02350* LOOPA FIELDS
02360         ORG   REUSE
02370  PITEMP RESV  11                 USED TO SHIFT PI UP
02380  PIPRIN RESV  1                  START OF PRINT LINE
02390*
02400* -------FIXED FIELDS------
02410*
02420* ------THE NEXT CHARACTER HAS A RECORD MARK TO END PRINTING------
02430 LHIADD  DSA   TOP                TOP OF DATA STORE
02440  PWQUOT DCW   #2B0               QUOTIENT FROM POWER DIVISION
02450  PI     DCW   #10                LAST 10 DIGITS OF PI (NOT ACCURATE)
02460         DC    #1                 THIS EXTRA SPACE IS USED TO SHIFT PI
02470*
02480  PDIVIS DCW   #3B25              DIVISOR FOR POWER DIVISION
02490*
02500* ------THE FOLLOWING THREE FIELDS MUST STAY TOGETHER------
02510  DIVIS  DCW   #3                 DIVISOR FOR DIV ROUTINE
02520  DIVID  DCW   #4B0               DIVIDEND FOR ALL DIVISIONS AND...
02530*                                 ...ALSO DATA AREA FOR PUT ROUTINE
02540         DC    #1                 STORE FOR PARTIALLY PACKED CHARACTER
02550*
02560  GETCT  DCW   #1                 SHIFT COUNTER FOR GET ROUTINE
02570  GETLOW DCW   #1B0               WORK AREA FOR BOTTOM THREE BITS
02580  GETCHR DCW   #1                 STORE FOR PARTIALLY UNPACKED CHARACTER
02590  REMX10 DCW   #4                 REMAINDER TIMES TEN FROM GET ROUTINE
02600  GETWRK RESV  6                  GET ROUTINE SHIFT LEFT WORK SPACE
02610*
02620* ------------------------
02630  BOTTOM EQU   *                  BOTTOM OF DATA STORAGE AREA
02640*
02650* -----INITIALISATION---------------------------------------
02660* THE ENTIRE AREA FOLLOWING IS OVERWRITTEN BY THE DATA LATER
02670* ----------------------------------------------------------
02680*
02690* ----THIS PEDANTIC ROUTINE CALCULATES THE FIRST DECIMAL PLACES OF PI ---
02700*  IT CAN COPE WITH THE SPECIAL CONDITIONS ARISING DURING EARLY
02710*  CALCULATION CYCLES BUT IT WASTES STORAGE SPACE.
02720*  ONCE THE MAIN LOOPS A & B HAVE TAKEN CONTROL IT IS OVERWRITTEN BY DATA
02730* -----------------------------------------------------------------------
02740*
02750  INIT   MCW   SCRGET+4,SCRSET    SET CORRECT ITEM MARKS FOR RESET
02760         MCW   GETGET+2,GETHI     DITTO
02770         MCW   PUTPUT+4,PUTHI     DITTO
02780*
02790* ------SET UP THE INITIAL DATA STORE------
02800*
02810         LCA   REM1,DIVID         FIRST POWER REMAINDER
02820         B     PUT                STORE IT
02830         LCA   REM2,DIVID         SECOND POWER REMAINDER
02840         B     PUT                STORE IT
02850         LCA   REM2,DIVID         RESET DIVID TO FOUR CHARACTERS
02860         BS    DIVID              2N-1 REMAINDER IS ZERO
02870         B     PUT                STORE IT
02880*
02890* ------STARTUP LOOP------
02900*
02910  LOOPI  CW    GETNUL             ENABLE GETTING VALUES
02920         S     ONE,COUNTI         DECREMENT LOOP COUNTER
02930         BCT   LASTI,60           CHECK FOR LAST TIME THROUGH
02940         LCA   PI+1,PITEMP        MOVE DIGITS TO PRINT AREA
02950         MCW   PITEMP,PI          SHIFT PI DIGITS UP ONE
02960         LCA   ONE,DIV2N          SET 2N-1 DIVISOR TO 1
02970         MCW   ADDOP,ADSUBI       SET FIRST PI ADJUSTMENT TO ADD
02980*
02990* ------STARTUP TERMS LOOP------  PROCESSES EACH STORED TERM
03000*
03010  TERMSI B     GET                GET POWER REMAINDER TIMES TEN
03020         LCA   REMX10,DIVID
03030         BA    QUOT1,DIVID        ADD IN PREVIOUS QUOTIENT FOR 25
03040* ------DIVIDE BY 25------
03050         LCA   DIVIS1,DIVIS
03060         B     DIV
03070         SST   QUOT,QUOT1,17
03080* ------STORE THE REMAINDER------
03090         B     PUT
03100* ------PROCESS THE SECOND POWER------
03110  NOW25  B     GET
03120         LCA   REMX10,DIVID
03130         BA    QUOT2,DIVID        ADD IN PREVIOUS QUOTIENT FOR 57121
03140* ------DIVIDE BY 57121------
03150         LCA   DIVIS2,DIVIS
03160         B     DIV
03170         SST   QUOT,QUOT2,17
03180* ------CHECK WHETHER SIGNIFICANT FIGURES ARE PRESENT YET------
03190         C     ZERO,DIVID         CHECK FOR ZERO REMAINDER
03200         BCT   PUT239,42          IF SO SKIP THE COUNTER UPDATE
03210         C     CNT239,DIV2N       CHECK WHETHER HIGHER THAN BEFORE
03220         BCT   PUT239,43          AND SKIP UPDATE IF NOT
03230         MCW   DIV2N,CNT239       ELSE UPDATE THE COUNTER
03240* ------STORE THE REMAINDER------
03250  PUT239 B     PUT
03260* ------PROCESS THE 2N-1 TERM------
03270  DO2NI  B     GET
03280         LCA   REMX10,DIVID
03290         BA    QUOT1,DIVID        ADD IN QUOTIENT FOR 25
03300         BS    QUOT2,DIVID        SUBTRACT QUOTIENT FOR 57121
03310* ------DIVIDE BY 2N-1 ------
03320         LCA   DIV2N,DIVIS
03330         B     DIV
03340* ------STORE THE REMAINDER------
03350         B     PUT
03360* ------ADJUST PI------
03370  ADSUBI A     QUOT,PI            ON ALTERNATE TERMS THIS LINE
03380         HA    ONE,ADSUBI         FLIPS BETWEEN ADD AND SUBTRACT
03390* -----------------------
03400         C     CNT25,DIV2N        TEST FOR LAST OLD TERM
03410         BA    TWO,DIV2N          INCREASE 2N-1 DIVISOR FOR NEXT TERM
03420         BCT   TERMSI,41          RETURN TO PROCESS NEXT TERMS
03430         C     ZERO,QUOT2         CHECK FOR MORE 239 TERMS NEEDED
03440         BCT   *+13,44            IF SO GO TO ADD MORE TERMS
03450         C     ZERO,QUOT1         CHECK FOR MORE 25 TERMS NEEDED
03460         BCT   LOOPI,42           EXIT TERMS LOOP IF NOT
03470         MCW   DIV2N,CNT25        UPDATE 25 COUNTER
03480         SW    GETNUL             STOP GETTING OLD VALUES
03490         B     TERMSI             RETURN TO CREATE MORE TERMS
03500*
03510* ------LAST PASS TO REMOVE UNWANTED REMAINDERS------
03520*
03530  LASTI  MCW   GETONE,GETMOD      CHANGE GET TO GET ONCE TIMES VALUE
03540         LCA   ONE,DIV2N          SET 2N-1 DIVISOR TO 1
03550  LST1   B     GET                GET 25 REMAINDER
03560         LCA   REMX10,DIVID       PREPARE TO REWRITE IT
03570         NOP
03580  LST2   B     LST3               SKIPS THE ZERO TEST LATER
03590         C     ZERO,REMX10        CHECK FOR ZERO
03600         BCT   LST3+3,42          IGNORE IF SO
03610         SW    PUTMRK,LST2        ELSE SET A MARKER AND SKIP TEST
03620  LST3   B     PUT                STORE THE 25 REMAINDER
03630         B     GET                GET 57121 REMAINDER
03640         LCA   REMX10,DIVID       PREPARE TO REWRITE IT
03650         C     CNT239,DIV2N       CHECK FOR SIGNIFICANT VALUE
03660         BCT   LST5+3,44          IGNORE IF NOT
03670         BCT   LST4,41            STORE IF NOT THE LAST ONE
03680         B     PUT                STORE IT
03690         SW    PUTMRK             SET MARKER ON THE NEXT VALUE
03700         B     LST5+3             SKIP TO NEXT VALUE
03710  LST4   C     ONE,DIV2N          CHECK FOR FIRST VALUE
03720         BCT   LST5,44            SKIP SETTING MARKER IF NOT
03730         SW    PUTMRK             SET MARKER ON THE VALUE
03740  LST5   B     PUT                STORE THE VALUE
03750         B     GET                GET 2N-1 REMAINDER
03760         LCA   REMX10,DIVID       PREPARE TO REWRITE IT
03770         C     CNT25,DIV2N        CHECK FOR LAST VALUE
03780         BCT   LST6,42            IF SO SKIP TO END ROUTINE
03790         B     PUT                STORE THE VALUE
03800         BA    TWO,DIV2N          INCREMENT 2N-1 DIVISOR
03810         B     LST1               RETURN FOR NEXT TERMS
03820  LST6   SW    PUTMRK             SET MARKER
03830         B     PUT                STORE LAST VALUE
03840         MCW   GETMOD+3,GETMOD    RESET GET TO MULTIPLY BY TEN
03850*
03860* ------END OF THE STARTUP PROCESS------
03870* ------SO PRINT THE CURRENT FIGURES------
03880*
03890  ENDI   LCA   PI+1,PITEMP        MOVE DIGITS TO PRINT AREA
03900         MCW   PITEMP,PI          SHIFT PI DIGITS UP ONE
03910         MCW   PITEMP-10,PIPRIN   MOVE FIRST DIGIT TO PRINT AREA
03920         PDT   PIPRIN,11,02,00    PRINT CHARACTER
03930         PCB   *,11,02,10         WAIT UNTIL PRINTING FINISHED
03940         MCW   DPOINT,PIPRIN      INSERT A DECIMAL POINT TO PRINT
03950         B     STARTA             TRANSFER CONTROL TO THE MAIN LOOP
03960*
03970* ------DATA USED BY THE STARTUP ROUTINE ONLY------
03980*
03990  QUOT1  DCW   #1B0               QUOTIENT FROM PREVIOUS DIVISION BY 25
04000  QUOT2  DCW   #1B6               QUOTIENT FROM PREVIOUS DIVISION BY 57121
04010*                                 NEEDS 6 TO MAKE THE FIRST DIVIDEND 956
04020  COUNTI DCW   #2A11              STARTUP LOOP COUNTER
04030  CNT239 DCW   #2B1           2N-1 VALUE OF LAST NON-ZERO 57121 REMAINDER
04040  CNT25  DCW   #2B1           2N-1 VALUE OF LAST 25 REMAINDER
04050* ------CONSTANTS----------
04060  REM1   DCW   #4B8               INITIAL REMAINDER FOR DIVISION BY 25
04070  REM2   DCW   #4B95              INITIAL REMAINDER FOR DIVISION BY 57121
04080  DIVIS1 DCW   #1B25              25 DIVISOR
04090  DIVIS2 DCW   #3B57121           57121 DIVISOR
04100  DPOINT DCW   #1A.               DECIMAL POINT
04110   GETONEB     GETX               MODIFIER TO GET ONCE TIMES THE VALUE
04120*
04130* ------START OF PROGRAM - REMOVE UNWANTED WORD MARKS------
04140*
04150  START  CW    GOPUT,PUTMRK
04160         CW    LST2,GETOVR
04170*
04180* ------SUPERIMPOSE THE SCRIPT ON THE PROGRAM CODE------
04190*
04200  SCRST1 BCC   *+9,SCRCOD-4,02    TEST TOP BIT AND...
04210         SI    0                  ...SET ITEM MARK IF ZERO
04220         BA    ONE,*-1            MOVE TO NEXT CODE CHARACTER
04230         BA    SCRCOD             MOVE TO NEXT BIT
04240         S     ONE,BITCNT         DECREMENT BIT COUNTER
04250         BCT   *+7,60             EXIT LOOP WHEN ZERO
04260         B     SCRST1             LOOP BACK FOR NEXT BIT
04270         S     ONE,SCRCNT         DECREMENT INSTRUCTION COUNTER
04280         BCT   INIT,60            EXIT LOOP WHEN ZERO
04290         MCW   SCRCOD+5,SCRCOD    GET NEXT INSTRUCTION
04300         BA    FIVE,*-3           MOVE TO NEXT INSTRUCTION
04310         MCW   BITRES,BITCNT      RESET BIT COUNTER
04320         B     SCRST1             LOOP BACK TO DO NEXT INSTRUCTION
04330*
04340  BITCNT DCW   #2A30              BIT COUNTER
04350  BITRES DCW   #2A30              NUMBER OF BITS PER INSTRUCTION
04360  SCRCNT DCW   #2A18              NUMBER OF SCRIPT INSTRUCTIONS
04370*
04380* ------SCRIPT CODE - ONLY FIVE CHARACTER INSTRUCTIONS ALLOWED------
04390*
04400* --START POWER CALCULATIONS SCRIPT--
04410   SCRCODSW    POWSW,POWSW
04420         HA    ONE,PWENDN
04430         HA    DIVMOD,PDIVIS
04440         HA    ONE,SUBPOW
04450         B     CALCPW,00,00
04460         C     ZERO,DIVID
04470         BCT   CALC2N,42,42
04480         SW    PUTMRK,GOPUT
04490         CW    GOSCPT,GOSCPT
04500         B     GOPUT,00,00
04510* --STOP POWER CALCULATIONS SCRIPT--
04520         B     PWEND1,00,00
04530         B     PWEND2,00,00
04540* --LOOP A END / START SCRIPT--
04550         LCA   PI+1,PITEMP        MOVE DIGITS TO PRINT AREA
04560         MCW   PITEMP,PI          SHIFT PI DIGITS UP ONE
04570         MCW   PITEMP-10,PIPRIN   MOVE FIRST DIGIT TO PRINT AREA
04580         EXT   ADDOP,ADDSUB       SET FIRST PI ADJUSTMENT TO ADD
04590         B     STARTA,00,00       GO TO PRINT LOOP A
04600         MCW   SCRSET,SCRGET+4    RESTART THE SCRIPT
04610* ------------------------------
04620         END   START
